package com.zrong.handler;

import java.util.List;

import json.JSONException;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.util.Log;
import android.widget.Toast;

import com.zrong.ApplicationData;
import com.zrong.activity.AccountManagerActivity;
import com.zrong.activity.EditLabelActivity;
import com.zrong.activity.GagaActivity;
import com.zrong.activity.GroupCreateActivity;
import com.zrong.activity.PersonalEditActivity;
import com.zrong.activity.PersonalInfoActivity;
import com.zrong.activity.WelcActivity;
import com.zrong.activity.WriteWeiboActivity;
import com.zrong.connection.Community;
import com.zrong.connection.Connection;
import com.zrong.connection.IOWriter;
import com.zrong.connection.Protocol;
import com.zrong.db.GaGaDB;
import com.zrong.entity.GameItem;
import com.zrong.entity.User;
import com.zrong.loader.AsyncDataLoader;
import com.zrong.util.GameAPI;
import com.zrong.weibobinding.BindingAccount;

/**
 * 
 * <p>
 * Titile:MessageHandler
 * </p>
 * <p>
 * Description: use demo Message msg = Message.obtain(); msg.what =
 * MES_SHOWDIALOG; MessageHandler.sharedHandler.sendMessage(msg);
 * </p>
 * <p>
 * Copyright:Copyright(c)2010
 * </p>
 * <p>
 * Company:zrong
 * </p>
 * 
 * @author yz
 * @version 1.0
 * @date 2012-5-24
 */
public class MessageHandler extends Handler {

	private Context context;

	/**
	 * show dialog
	 */
	public static final int MES_SHOWDIALOG = 1;
	/**
	 * 快速注册成功
	 */
	public static final int MES_FastRegist_SUCCESS = 2;
	/**
	 * 注册成功
	 */
	public static final int MES_Regist_SUCCESS = 3;
	/**
	 * 登录成功
	 */
	public static final int MES_LOGIN_SUCCESS = 4;
	/**
	 * 插入用戶名密碼
	 */
	public static final int MES_INSERT_USER = 5;
	/**
	 * 更新用戶名密碼
	 */
	public static final int MES_UPDATE_USER = 6;
	/**
	 * 创建角色
	 */
	public static final int MES_CREATE_ROLE = 7;
	/**
	 * 更新角色
	 */
	public static final int MES_UPDATE_ROLE = 8;
	/**
	 * 列出角色
	 */
	public static final int MES_List_ROLE = 9;

	/**
	 * 创建微群
	 */
	public static final int MES_CREATE_GROUP = 10;

	/**
	 * 加入微群
	 */
	public static final int MES_JOINT_GROUP = 11;

	/**
	 * 修改账号密码
	 */
	public static final int MES_CHANGE_AccountAndPwd = 12;
	/**
	 * 重置密码
	 */
	public static final int MES_SET_Pwd = 13;
	/**
	 * 登录角色
	 */
	public static final int MES_LOGIN_ROLE = 14;

	/**
	 * 添加关注
	 */
	public static final int MES_Add_Attention = 16;

	/**
	 * 发送私信成功
	 */
	public static final int MES_SENDMSG_SUCCESS = 15;

	/**
	 * 发送微博成功
	 */
	public static final int MES_sendWeibo_Success = 17;

	/**
	 * 取消关注
	 */
	public static final int MES_CancelAttention_Success = 18;

	private static MessageHandler handler;

	public static MessageHandler sharedHandler() {
		return handler;
	}

	public MessageHandler(Looper looper, Context context) {
		super(looper);
		this.context = context;
		handler = this;
	}

	@Override
	public void handleMessage(Message msg) {
		Intent intent = new Intent();
		switch (msg.what) {
		case MES_SHOWDIALOG:
			Log.v("DEBUG", "" + MES_SHOWDIALOG);
			break;
		case MES_FastRegist_SUCCESS:
			// 发送创建角色包
			Connection.sendMessage(
					Protocol.msgType_createRole,
					IOWriter.getRoleCreate(Protocol.msgType_createRole,
							ApplicationData.currentUser.getKeyID(),
							GameAPI.userApp, GameAPI.channel, GameAPI.platform,
							ApplicationData.currentUser.getU_name(), "0")
							.getBytes(), GameAPI.Port_Role);
			break;
		case MES_Regist_SUCCESS:
			GagaActivity.launch(context, intent);
			if (WelcActivity.mIntance != null) {
				WelcActivity.mIntance.finish();
				WelcActivity.mIntance = null;
			}
			break;
		case MES_LOGIN_SUCCESS:
			String str = IOWriter.getBrowseRoleInfo(Protocol.msgType_loginRole,
					ApplicationData.currentUser.getKeyID(), "");
			// 发送登录角色包
			Connection.sendMessage(Protocol.msgType_loginRole, str.getBytes(),
					GameAPI.Port_Role);
			break;
		case MES_INSERT_USER:
			GaGaDB.getGaGaDBInstance(context).insertUser((User) msg.obj);
			break;
		case MES_UPDATE_USER:
			GaGaDB.getGaGaDBInstance(context).updateUser((User) msg.obj);
			break;
		case MES_CREATE_ROLE:
			// TODO
			GaGaDB.getGaGaDBInstance(context).updateUserInfo(
					ApplicationData.currentUser);
			if (WelcActivity.mIntance != null) {
				Toast.makeText(context, "登录成功", Toast.LENGTH_SHORT).show();
				WelcActivity.mIntance.dialog.dismiss();
				WelcActivity.mIntance.finish();
				WelcActivity.mIntance = null;
			}
			Bundle b = new Bundle();
			b.putBoolean(GagaActivity.LAG_IS_NEWCOMMER, true);
			intent.putExtras(b);
			GagaActivity.launch(context, intent);

			break;
		case MES_LOGIN_ROLE:
			GagaActivity.launch(context, intent);
			if (WelcActivity.mIntance != null) {
				Toast.makeText(context, "登录成功", Toast.LENGTH_SHORT).show();
				WelcActivity.mIntance.dialog.dismiss();
				WelcActivity.mIntance.finish();
				WelcActivity.mIntance = null;
			}
			// 获取绑定微博账号
			getBindingUserFromDB();
			// load 游戏列表
			new AsyncDataLoader(new AsyncDataLoader.Callback() {

				@Override
				public void onStart() {
					try {
						List<GameItem> list = Community.getInstance()
								.getGameItemListOfClient();
						if (list != null) {
							ApplicationData.gameItemListOfClient.addAll(list);
						}
					} catch (JSONException e) {
						e.printStackTrace();
					}
				}

				@Override
				public void onPrepare() {
				}

				@Override
				public void onFinish() {
				}
			}).execute();
			break;
		case MES_UPDATE_ROLE:
			// TODO
			Toast.makeText(context, "修改成功", Toast.LENGTH_SHORT).show();
			if (PersonalEditActivity.mInstance != null) {
				if (PersonalEditActivity.mInstance.dialog != null
						&& PersonalEditActivity.mInstance.dialog.isShowing()) {
					PersonalEditActivity.mInstance.dialog.dismiss();
					PersonalEditActivity.mInstance
							.setProgressBarIndeterminateVisibility(false);
				}
				PersonalEditActivity.mInstance.getGameContext().finish();
				PersonalEditActivity.mInstance = null;
				if (PersonalInfoActivity.mIntance != null) {
					PersonalInfoActivity.mIntance.update();
				}
				// if(GagaActivity.mInstance!=null){
				// GagaActivity.mInstance.myName
				// }
			}
			if (EditLabelActivity.mInstance != null) {
				if (EditLabelActivity.mInstance.dialog != null
						&& EditLabelActivity.mInstance.dialog.isShowing()) {
					EditLabelActivity.mInstance.dialog.dismiss();
					EditLabelActivity.mInstance
							.setProgressBarIndeterminateVisibility(false);
				}
				EditLabelActivity.mInstance.getGameContext().finish();
				EditLabelActivity.mInstance = null;
			}

			break;
		case MES_List_ROLE:
			// TODO
			break;
		case MES_CHANGE_AccountAndPwd:
			if (AccountManagerActivity.mInstance != null) {
				if (AccountManagerActivity.mInstance.dialog != null
						&& AccountManagerActivity.mInstance.dialog.isShowing()) {
					AccountManagerActivity.mInstance.dialog.dismiss();
					AccountManagerActivity.mInstance
							.setProgressBarIndeterminateVisibility(false);
				}
			}
			Toast.makeText(context, "修改成功", Toast.LENGTH_SHORT).show();
			ApplicationData.currentUser
					.setU_name(ApplicationData.temporaryAccountName);
			ApplicationData.currentUser.setU_psd(ApplicationData.temporaryPwd);
			GaGaDB.getGaGaDBInstance(context).updateUser(
					ApplicationData.currentUser);

			// TODO
			break;
		case MES_SET_Pwd:
			// TODO
			if (AccountManagerActivity.mInstance != null) {
				if (AccountManagerActivity.mInstance.dialog != null
						&& AccountManagerActivity.mInstance.dialog.isShowing()) {
					AccountManagerActivity.mInstance.dialog.dismiss();
					AccountManagerActivity.mInstance
							.setProgressBarIndeterminateVisibility(false);
				}
			}
			if(msg.arg1==0){
				Toast.makeText(context, "修改成功", 1000).show();
				ApplicationData.currentUser.setU_psd(ApplicationData.temporaryPwd);
				GaGaDB.getGaGaDBInstance(context).updateUser(
						ApplicationData.currentUser);
			} else {
				Toast.makeText(context, "修改失败", 1000).show();
			}
			
			break;
		case MES_SENDMSG_SUCCESS:
			// TODO
			Toast.makeText(context, "发送成功", 1000).show();
			break;
		case MES_Add_Attention:
			Toast.makeText(context, "关注成功", Toast.LENGTH_SHORT).show();
			if (PersonalInfoActivity.mIntance != null) {
				PersonalInfoActivity.mIntance.updateAttenBtn();
			}
			break;
		case MES_JOINT_GROUP:
			Toast.makeText(context, "申请已发送成功", Toast.LENGTH_SHORT).show();
			break;
		case MES_sendWeibo_Success:
			if (WriteWeiboActivity.mInstance != null) {
				if (WriteWeiboActivity.mInstance.dialog != null
						&& WriteWeiboActivity.mInstance.dialog.isShowing()) {
					WriteWeiboActivity.mInstance.dialog.dismiss();
					WriteWeiboActivity.mInstance
							.setProgressBarIndeterminateVisibility(false);
				}
				WriteWeiboActivity.mInstance.getGameContext().finish();
				WriteWeiboActivity.mInstance = null;
			}
			break;
		case MES_CancelAttention_Success:
			Toast.makeText(context, "取消关注成功", Toast.LENGTH_SHORT).show();
			if (PersonalInfoActivity.mIntance != null) {
				PersonalInfoActivity.mIntance.updateAttenBtn();
			}
			break;
		case MES_CREATE_GROUP:
			if (GroupCreateActivity.mInstance != null) {
				if (GroupCreateActivity.mInstance.dialog != null
						&& GroupCreateActivity.mInstance.dialog.isShowing()) {
					GroupCreateActivity.mInstance.dialog.dismiss();
					GroupCreateActivity.mInstance
							.setProgressBarIndeterminateVisibility(false);
					GagaActivity.mInstance.updateMyGroups();
				}
				GroupCreateActivity.mInstance.getGameContext().finish();
				GroupCreateActivity.mInstance = null;
			}
			break;

		default:
			break;
		}
	}

	// @Override
	// public void OnStateIdle(BaseHttp http, byte state)
	// {
	// // TODO Auto-generated method stub
	// switch(state)
	// {
	// case BaseHttp.IDLE:
	// Connection.sendRequest();
	// break;
	// case BaseHttp.PREPARETION:
	// break;
	// case BaseHttp.WORKING:
	// break;
	// case BaseHttp.FINISH:
	// break;
	// default:
	// break;
	// }
	// }

	private void getBindingUserFromDB() {
		Cursor c = GaGaDB.getGaGaDBInstance(context).query(
				BindingAccount.BindingAccountTable.TAB_NAME,
				null,
				BindingAccount.BindingAccountTable.BINDINGUSER_USER_KEYID
						+ "=?",
				new String[] { ApplicationData.currentUser.getKeyID() }, null,
				null, null);
		c.moveToFirst();
		List<BindingAccount> list = BindingAccount.BindingAccountTable
				.getBindingUserList(c);
		if (list != null) {
			ApplicationData.bindingUserList.clear();
			ApplicationData.bindingUserList.addAll(list);
		}
	}
}
